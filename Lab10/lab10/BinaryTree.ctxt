#BlueJ class context
comment0.target=BinaryTree
comment0.text=\r\n\ Binary\ Tree\ abstract\ Class\ \r\n\r\n\ @author\ Tafita\ Rakotozandry\ \r\n\ @version\ 1\r\n
comment1.params=
comment1.target=BinaryNode\ getRoot()
comment1.text=\r\nRoot\ getter\ \r\n\r\n@return\ root\r\n
comment10.params=
comment10.target=java.lang.String\ postOrderString()
comment10.text=\r\n\ -\ Returns\ a\ String\ representation\ using\ postorder\ traversal.\r\n\ \r\n
comment11.params=node\ list
comment11.target=void\ inOrderArrayHelper(BinaryNode,\ java.util.ArrayList)
comment11.text=\r\nHelper\ function\ for\ inorder\ array\r\n\r\n@param\ node\ the\ node\ in\ concern\r\n
comment12.params=
comment12.target=java.util.ArrayList\ inOrderArray()
comment12.text=\r\n\ Calls\ inOrderArrayHelper\ at\ the\ root\ with\ an\ empty\ list\r\n\r\n\ @return\ ArrayList\ representation\ of\ this\ using\ in-order\ traversal\r\n
comment13.params=
comment13.target=java.lang.String\ inOrderString()
comment13.text=\r\nReturns\ a\ String\ representation\ using\ inOrder\ traversal\r\n\r\n
comment14.params=arrayList
comment14.target=java.lang.String\ treeArrayToString(java.util.ArrayList)
comment14.text=\r\n\ Converts\ arrayList\ of\ nodes\ to\ String\ representation\r\n\r\n\ @param\ arrayList\ The\ arrayList\ to\ make\ into\ string\r\n\ @return\ the\ string\ representation\r\n
comment15.params=node\ currentDepth\ requiredDepth
comment15.target=int\ numOfElementsDepthHelper(BinaryNode,\ int,\ int)
comment15.text=\r\n\ Helper\ function\ for\ this.numOfElementsDepth()\r\n\r\n\ @param\ node\ \ \ \ \ \ \ \ \ \ current\ node\ in\ the\ recursive\ iteration\r\n\ @param\ currentDepth\ \ \ \ current\ node's\ depth\r\n\ @param\ requiredDepth\ \ required\ depth\ at\ which\ we\ count\ the\ num\ of\ elements\r\n\ @return\ \ the\ number\ of\ elements\ at\ depth\ requiredDepth\ in\ the\ tree\r\n
comment16.params=i
comment16.target=int\ numOfElementsDepth(int)
comment16.text=\r\n\ \ returns\ the\ number\ of\ elements\ at\ a\ certain\ depth\ i\r\n\r\n@param\ i\:\ the\ depth\ number\r\n
comment17.params=node
comment17.target=int\ getHeight(BinaryNode)
comment17.text=\r\n\ compute\ the\ height\ of\ a\ given\ node\ t\r\n\r\n\ @param\ t\ the\ given\ node\ \r\n\ @return\ the\ height\ of\ t\r\n
comment2.params=node
comment2.target=void\ setRoot(BinaryNode)
comment2.text=\r\nRoot\ Setter\ \r\n\r\n@param\ node\ the\ binary\ node\ to\ insert\r\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\r\n\ Returns\ true\ if\ there\ are\ no\ items\ in\ the\ tree,\ false\ otherwise.\r\n\ \r\n
comment4.params=
comment4.target=void\ empty()
comment4.text=\r\n\ Removes\ all\ the\ items\ from\ the\ tree.\r\n\ \r\n
comment5.params=node\ list
comment5.target=void\ preOrderArrayHelper(BinaryNode,\ java.util.ArrayList)
comment5.text=\r\n\ Helper\ function\ for\ preOrderArray\r\n\r\n\ @param\ node\ the\ current\ node\ to\ traverse\ recursively\r\n\ @param\ list\ the\ complete\ list\ of\ nodes\ traversed\r\n
comment6.params=
comment6.target=java.util.ArrayList\ preOrderArray()
comment6.text=\r\n\ @return\ ArrayList\ representation\ of\ this\ using\ pre-order\ traversal\r\n
comment7.params=
comment7.target=java.lang.String\ preOrderString()
comment7.text=\r\n\ \ Returns\ a\ String\ representation\ using\ preorder\ traversal.\r\n
comment8.params=node\ list
comment8.target=void\ postOrderArrayHelper(BinaryNode,\ java.util.ArrayList)
comment8.text=\r\n\ Helper\ function\ for\ postOrderArray\r\n\r\n\ @param\ node\ the\ current\ node\ to\ traverse\ recursively\r\n\ @param\ list\ the\ complete\ list\ of\ nodes\ traversed\r\n
comment9.params=
comment9.target=java.util.ArrayList\ postOrderArray()
comment9.text=\r\n\ @return\ ArrayList\ representation\ of\ this\ using\ post-order\ traversal\r\n
numComments=18
